---
import '../styles/global.css';

const currentPath = Astro.url.pathname;

const menu = [
  {
    link: "/astro-playground/",
    name: "Home"
  },
  {
    link: "/astro-playground/sticky",
    name: "Sticky Button"
  },
  {
    link: "/astro-playground/imgzoom",
    name: "Image Zoom"
  },
  {
    link: "/astro-playground/stack",
    name: "Card Stack"
  },
  {
    link: "/astro-playground/text",
    name: "Text"
  }
]

---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/astro-playground/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Playground</title>
  </head>
  
  <body>
    <div class="inner">

      <div class="page">
        <div class="wrapper"> 
          <header>
            {menu.map((item) => ( 
              <a href={item.link} data-astro-prefetch
                 class={currentPath === item.link ? "link active" : "link"}>
                {item.name}
              </a>
            ))}
          </header>
        </div>

        <slot />
       
      </div>

    </div>

    <div class="slider"></div>
  </body>
</html>

<script>
  import { animate } from 'motion';
  import Lenis from '@studio-freight/lenis';

  const lenis = new Lenis({ 
    lerp: 0.12 // Constrols the intensity
    // duration: 4
  });

  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }

  requestAnimationFrame(raf);

  const links = document.querySelectorAll(".link");
  const inner = document.querySelector('.inner');
  const slider = document.querySelector('.slider');
  const page = document.querySelector('.page');
  const transitionDuration = 0.6;

  inner.style.transform = "translateY(100px)";

  window.addEventListener('load', () => {
    animate(inner, {
        opacity: [0, 1],
        y: ["100px", "0px"]
    }, {
        duration: transitionDuration,
        easing: [.88, .16, .15, .86]
    });
  });


  document.addEventListener("DOMContentLoaded", () => {
    
    links.forEach((link) => {
      link.addEventListener("click", function(event) {
        event.preventDefault(); // Prevent the default behavior of the anchor tag

        // Store the href attribute value
        const href = this.getAttribute("href");

        // Stop the navigation to the current page
        if ( href !== window.location.pathname ) {
          transitionOut(href); // Trigger animation functon
        }
      });
    });

    function transitionOut(href) {
      // Motion One animations here
      animate(slider, 
        {
          top: "0"
        },
        {
          duration: transitionDuration,
          easing: [.88, .16, .15, .86]
        })

      animate(page, 
        {
          y: "-100px",
          scale: 0.9,
          opacity: 0.2
        }, 
        { 
          duration: transitionDuration,
        }
      )

      setTimeout(() => {
        window.location.href = href;
      }, (transitionDuration * 1000) * 1.05 );
    }

  });

  

</script>

<style>
  /* Smooth scroll set up */
  html.lenis,
  html.lenis body {
    height: auto;
  }

  .lenis.lenis-smooth {
    scroll-behavior: auto !important;
  }

  .lenis.lenis-smooth [data-lenis-prevent] {
    overscroll-behavior: contain;
  }

  .lenis.lenis-stopped {
    overflow: hidden;
  }

  .lenis.lenis-scrolling iframe {
    pointer-events: none;
  }

  /* Page transition set up */
  .inner {
    background-color: black;
    display: flex;
    min-height: 100vh;
    opacity: 0;
  }

  .page {
    background-color: white;
    width: 100%;
    transform: translateY(0);
    transform-origin: center top;
  }

  .slider {
    background-color: white;
    position: fixed;
    top: 100vh;
    left: 0;
    height: 100vh;
    width: 100vw;
  }
</style>